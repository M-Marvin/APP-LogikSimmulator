
buildscript {
    ext {
        kotlin_version = '1.1.2-2'
        osgi_platform = 'win32.win32.x86_64'
        swt_version = '3.105.3'
    }
}

plugins {
	id "com.github.johnrengelman.shadow" version "7.1.0"
}

apply plugin: 'java'

project.ext.lwjglVersion = "3.3.1"
project.ext.lwjglNatives = "natives-windows"
//project.ext.lwjglNatives = "natives-linux"

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
	flatDir { dir 'libs' }
}

configurations {
    shade
    implementation.extendsFrom shade
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

dependencies {
	
	// LWJGL
	shade platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
	shade "org.lwjgl:lwjgl"
	shade "org.lwjgl:lwjgl-opengl"
	shade "org.lwjgl:lwjgl::$lwjglNatives"
	shade "org.lwjgl:lwjgl-opengl::$lwjglNatives"
	
	// CommandLineParser
	shade 'com.github.M-Marvin:LIBRARY-CommandLineParser:main-SNAPSHOT'
	
	// UniVec
	shade 'com.github.M-Marvin:LIBRARY-UnifiedVectors:main-SNAPSHOT'
	
	// SWT Windows x64
	shade 'org.eclipse.platform:org.eclipse.swt.win32.win32.x86_64:3.124.100'
	//shade 'swt:swt-linux-amd64'
	//shade 'swt:swt-win-amd64'
	
	// GSON
	shade "com.google.code.gson:gson:2.9.1"
	
}

jar {
    from { (configurations.runtime).collect { it.isDirectory() ? it : zipTree(it) } } {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
    manifest {
        attributes 'Main-Class': 'de.m_marvin.logicsim.LogicSim'
        attributes 'Implementation-Version': '0.1.3 - alpha'
        attributes 'Implementation-Title': 'Multithreadding Logic Simulator'
        attributes 'Implementation-Vendor-Id': 'de.m_marvin'
    }
}

configurations.all {
    resolutionStrategy {
        dependencySubstitution {
            // The maven property ${osgi.platform} is not handled by Gradle
            // so we replace the dependency, using the osgi platform from the project settings
            substitute module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}') with module("org.eclipse.platform:org.eclipse.swt.$osgi_platform:$swt_version")
        }
    }
}

task assembleBin() {
	description "Copies all required files into the output installation folder"
	
	doLast {
		ant.copy(file:'build/libs/LogikSimulator-all.jar', tofile:'../Runtime/logicsim.jar')
	}
}

assembleBin.dependsOn(shadowJar)
