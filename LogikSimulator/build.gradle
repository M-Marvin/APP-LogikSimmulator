import org.gradle.internal.os.OperatingSystem

plugins {
	id "com.github.johnrengelman.shadow" version "7.1.0"
}

apply plugin: 'java'

project.ext.lwjglVersion = "3.3.3"

switch (OperatingSystem.current()) {
	case OperatingSystem.WINDOWS:
		def osArch = System.getProperty("os.arch")
		project.ext.lwjglNatives = osArch.contains("64")
			? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
			: "natives-windows-x86"
		break
}

configurations.all {
    resolutionStrategy {
        dependencySubstitution {
            def os = System.getProperty("os.name").toLowerCase()
            if (os.contains("windows")) {
                substitute module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}') with module("org.eclipse.platform:org.eclipse.swt.win32.win32.x86_64:3.114.0")
            }
        }
    }
}

version = '0.1.2-alpha'

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

configurations {
    shade
    implementation.extendsFrom shade
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
	
	// LWJGL
	shade platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

	shade "org.lwjgl:lwjgl"
	shade "org.lwjgl:lwjgl-glfw"
	shade "org.lwjgl:lwjgl-openal"
	shade "org.lwjgl:lwjgl-opengl"
	shade "org.lwjgl:lwjgl::$lwjglNatives"
	shade "org.lwjgl:lwjgl-glfw::$lwjglNatives"
	shade "org.lwjgl:lwjgl-opengl::$lwjglNatives"
	
	// CommandLineParser
	shade 'com.github.M-Marvin:LIBRARY-CommandLineParser:main-SNAPSHOT'
	
	// SimpleLogging
	shade 'com.github.M-Marvin:LIBRARY-SimpleLogging:main-SNAPSHOT'
	
	// GSON
	shade "com.google.code.gson:gson:2.9.1"
	
	// UniVec
	shade 'com.github.M-Marvin:LIBRARY-UnifiedVectors:v1.3'
	
	// OpenUI
	shade 'com.github.M-Marvin:LIBRARY-OpenUI:main-SNAPSHOT'
	
	// SWT
	shade 'org.eclipse.platform:org.eclipse.swt.win32.win32.x86_64:3.123.0'
	
}

jar {
    manifest {
        attributes 'Main-Class': 'de.m_marvin.logicsim.LogicSim'
        attributes 'Implementation-Version': version
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-Vendor-Id': 'de.m_marvin'
    }
}

task assembleBin() {
	description "Copies all required files into the output installation folder"
	
	doLast {
		ant.copy(file:'build/libs/LogikSimulator-' + version + '-all.jar', tofile:'../Runtime/logicsim.jar')
	}
}

assembleBin.dependsOn(shadowJar)
